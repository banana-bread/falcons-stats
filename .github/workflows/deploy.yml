name: Deploy Flask API

on:
  push:
    branches: ["main"]

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write # needed for OIDC
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_OIDC_ROLE_ARN }}
          aws-region: us-east-1

      - name: Deploy via AWS SSM
        run: |
          # Send command to AWS SSM and capture Command ID
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy Falcons Stats Flask API" \
            --parameters '{"commands":[
              "export HOME=/home/ssm-user",
              "git config --system --add safe.directory /home/ssm-user/falcons-stats",
              "cd /home/ssm-user/falcons-stats",
              "sudo runuser -l ssm-user -c \"cd /home/ssm-user/falcons-stats && git pull origin main\"",
              "/home/ssm-user/.local/bin/poetry install --no-interaction",
              "sudo systemctl restart falcons-stats"
            ]}' \
            --query "Command.CommandId" --output text)

          echo "SSM Command ID: $COMMAND_ID"

          # Wait for the command to complete
          aws ssm wait command-executed \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --command-id "$COMMAND_ID"

          # Fetch execution details
          STATUS=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --query "Status" --output text)

          STDOUT=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --query "StandardOutputContent" --output text)

          STDERR=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --query "StandardErrorContent" --output text)

          # Log outputs in GitHub Actions for debugging
          echo "SSM Command Output:"
          echo "$STDOUT"

          echo "SSM Command Error:"
          echo "$STDERR"

          # If the command failed, force GitHub Actions to fail
          if [[ "$STATUS" != "Success" ]]; then
            echo "SSM Command Failed with status: $STATUS"
            exit 1
          fi

          # Also fail if there's anything in STDERR
          if [[ -n "$STDERR" && "$STDERR" != "None" ]]; then
            echo "Errors detected in command output!"
            exit 1
          fi
